grep(gcm[i], ., value = T, fixed = T) %>%
.[1]
limitations(path_lyr_prob = path_lyr_prob,
path_lyr_clust = path_lyr_clust,
path_output = paste0('../_rf/_output/_run1/_results/_process/_limitations/_2050/'),#_percentil0_5
nameOutput = paste0('RF_', no.clusters, 'Clust_lim_', gcm[i], '.asc'),
no.absenceclasses = 2,
no.clusters = no.clusters)
}
# Load libraries
require(pacman)
pacman::p_load(raster, rgdal, tidyverse)
# Initial setup
g <- gc(reset = TRUE)
rm(list = ls())
options(scipen = 999)
# Function to use
mixedCategory <- function(pth.cls, pth.unc, pth.prb, threshold, no.absenceclasses){
lyrClust <- raster(pth.cls)
lyrUnc <- raster(pth.unc)
lyrPrb <- raster(pth.prb)
thrUnc <- raster::extract(lyrUnc, occ[,1:2])
thrUnc <- thrUnc[!is.na(thrUnc)]
thrUnc1  <- quantile(thrUnc, 0.1) %>% as.numeric()
quantile(thrUnc, seq(0, 1, 0.01))
min(thrUnc)
# save(thrUnc1, file = '../_rData/_run2/threshold_unc.rData')
rslt <- lyrClust
rslt[which(lyrUnc[] < thrUnc1 & lyrPrb[] > threshold)] <- max(unique(lyrClust[]), na.rm = T) + 1
print('To write the raster')
writeRaster(rslt, paste0('../_RF/_run2/_results/_process/RF_5Classes_unc_', gcm, '.asc'), overwrite = TRUE)
print('Â¡Done!')
}
# Load data
run <- '_run1'
load('../_rData/_run1/threshold_prob.rData')
load('../_rData/_run2/threshold_unc.rData')
load('../_rData/_run1/clustereddata.rData')
# Load libraries
require(pacman)
pacman::p_load(raster, rgdal, tidyverse)
# Initial setup
g <- gc(reset = TRUE)
rm(list = ls())
options(scipen = 999)
# Function to use
mixedCategory <- function(pth.cls, pth.unc, pth.prb, threshold, no.absenceclasses){
lyrClust <- raster(pth.cls)
lyrUnc <- raster(pth.unc)
lyrPrb <- raster(pth.prb)
thrUnc <- raster::extract(lyrUnc, occ[,1:2])
thrUnc <- thrUnc[!is.na(thrUnc)]
thrUnc1  <- quantile(thrUnc, 0.1) %>% as.numeric()
quantile(thrUnc, seq(0, 1, 0.01))
min(thrUnc)
# save(thrUnc1, file = '../_rData/_run2/threshold_unc.rData')
rslt <- lyrClust
rslt[which(lyrUnc[] < thrUnc1 & lyrPrb[] > threshold)] <- max(unique(lyrClust[]), na.rm = T) + 1
print('To write the raster')
writeRaster(rslt, paste0('../_RF/_run2/_results/_process/RF_5Classes_unc_', gcm, '.asc'), overwrite = TRUE)
print('¡Done!')
}
# Load data
run <- '_run1'
load('../_rData/_run1/threshold_prob.rData')
load('../_rData/_run1/clustereddata.rData')
gcm <- 'current'
no.absenceclasses <- 2
no.clusters <- 3
gcm <- list.files('../_rf/_output/_run1/_results/_raw/_2050', pattern = 'Clust') %>%
gsub('RF_3Clust_', '', .) %>%
gsub('_2030.asc', '', .)
gcm
gcm <- list.files('../_rf/_output/_run1/_results/_raw/_2050', pattern = 'Clust') %>%
gsub('RF_3Clust_', '', .) %>%
gsub('_2030.asc', '', .)
years <- '_2050'
cl <- makeCluster(length(6)) #N?mero de nucleos a utilizar
registerDoSNOW(cl) # registerDoMC(length(gcm))
pacman::p_load(raster, rgdal, tidyverse, rgeos, gtools, stringr, foreach, parallel, doSNOW)
gcm <- list.files('../_rf/_output/_run1/_results/_raw/_2050', pattern = 'Clust') %>%
gsub('RF_3Clust_', '', .) %>%
gsub('_2030.asc', '', .)
cl <- makeCluster(length(6))
registerDoSNOW(cl)
i ¿ 1
i = 1
path_lyr_prob <- paste('../_rf/_output/_run1/_results/_raw', years[1], sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('rob', ., value = T) %>%
grep(gcm[i], ., value = T, fixed = T) %>%
.[1]
path_lyr_prob
stopCluster(cl)
# Load libraries
require(pacman)
pacman::p_load(raster, rgdal, tidyverse)
# Initial setup
g <- gc(reset = TRUE)
rm(list = ls())
options(scipen = 999)
# Function to use
mixedCategory <- function(pth.cls, pth.unc, pth.prb, threshold, no.absenceclasses){
lyrClust <- raster(pth.cls)
lyrUnc <- raster(pth.unc)
lyrPrb <- raster(pth.prb)
thrUnc <- raster::extract(lyrUnc, occ[,1:2])
thrUnc <- thrUnc[!is.na(thrUnc)]
thrUnc1  <- quantile(thrUnc, 0.1) %>% as.numeric()
quantile(thrUnc, seq(0, 1, 0.01))
min(thrUnc)
# save(thrUnc1, file = '../_rData/_run2/threshold_unc.rData')
rslt <- lyrClust
rslt[which(lyrUnc[] < thrUnc1 & lyrPrb[] > threshold)] <- max(unique(lyrClust[]), na.rm = T) + 1
print('To write the raster')
writeRaster(rslt, paste0('../_RF/_run2/_results/_process/RF_5Classes_unc_', gcm, '.asc'), overwrite = TRUE)
print('¡Done!')
}
# Load data
run <- '_run1'
load('../_rData/_run1/threshold_prob.rData')
load('../_rData/_run1/clustereddata.rData')
gcm <- 'current'
pth.cls <- '../_rf/_output/_run1/_results/_process/_limitations/RF_3_Clust_lim_current.asc '
pth.cls <- '../_rf/_output/_run1/_results/_process/_limitations/RF_3_Clust_lim_current.asc '
pth.unc <- '../_rf/_output/_run1/_results/_raw/RF_5Unc_current.asc'
pth.unc <- '../_rf/_output/_run1/_results/_raw/RF_5Unc_current.asc'
pth.prb <- '../_RF/_output/_run1/_results/_raw/RF_5Prob_future.asc'
pth.out <- '../_rf/_output/_run1/_results/_raw'
no.absenceclasses <- 2
no.clusters <- 3
threshold
occ <- occ[,1:2]
occ
mixedCategory(pth.cls, pth.unc, pth.prb, threshold, no.absenceclasses)
pth.out
pth.out <- '../_rf/_output/_run1/_results/_raw'
pth.cls
pth.unc
pth.prb
threshold
no.absenceclasses
mixedCategory(pth.cls, pth.unc, pth.prb, threshold, no.absenceclasses)
pth.cls <- '../_rf/_output/_run1/_results/_process/_limitations/RF_3_Clust_lim_current.asc '
pth.unc <- '../_rf/_output/_run1/_results/_raw/RF_5Unc_current.asc'
pth.prb <- '../_rf/_output/_run1/_results/_raw/RF_5Prob_future.asc'
pth.out <- '../_rf/_output/_run1/_results/_raw'
lyrClust <- raster(pth.cls)
lyrUnc <- raster(pth.unc)
lyrPrb <- raster(pth.prb)
thrUnc <- raster::extract(lyrUnc, occ[,1:2])
thrUnc <- thrUnc[!is.na(thrUnc)]
thrUnc
thrUnc1  <- quantile(thrUnc, 0.1) %>% as.numeric()
thrUnc1
quantile(thrUnc, seq(0, 1, 0.01))
min(thrUnc)
save(thrUnc1, file = '../_rData/_run1/threshold_unc.rData')
rslt <- lyrClust
rslt[which(lyrUnc[] < thrUnc1 & lyrPrb[] > threshold)] <- max(unique(lyrClust[]), na.rm = T) + 1
print('To write the raster')
writeRaster(rslt, paste0('../_rf/_output/_run1/_results/_process/RF_5Classes_unc_', gcm, '.asc'), overwrite = TRUE)
# Load libraries
require(pacman)
pacman::p_load(raster, rgdal, tidyverse, rgeos, gtools, stringr, doSNOW, foreach)
# Initial setup
g <- gc(reset = TRUE)
rm(list = ls())
options(scipen = 999)
# Functions to use
mixedCategory <- function(pathClust, pathUnc, pathProb, thr.prb, thr.unc){
lyrClust <- raster(pathClust)
lyrUnc   <- raster(pathUnc)
lyrProb  <- raster(pathProb)# To 2 criterios
result <- lyrClust
result[which(lyrUnc[] < thr.unc & lyrProb[] > thr.prb)] <- max(unique(lyrClust[]), na.rm = T) + 1
return(result)
}
# Function to use
mixedCategory <- function(pth.cls, pth.unc, pth.prb, threshold, no.absenceclasses){
lyrClust <- raster(pth.cls)
lyrUnc <- raster(pth.unc)
lyrPrb <- raster(pth.prb)
thrUnc <- raster::extract(lyrUnc, occ[,1:2])
thrUnc <- thrUnc[!is.na(thrUnc)]
thrUnc1  <- quantile(thrUnc, 0.1) %>% as.numeric()
quantile(thrUnc, seq(0, 1, 0.01))
min(thrUnc)
save(thrUnc1, file = '../_rData/_run1/threshold_unc.rData')
rslt <- lyrClust
rslt[which(lyrUnc[] < thrUnc1 & lyrPrb[] > threshold)] <- max(unique(lyrClust[]), na.rm = T) + 1
print('To write the raster')
writeRaster(rslt, paste0('../_rf/_output/_run1/_results/_process/RF_5Classes_unc_', gcm, '.asc'), overwrite = TRUE)
print('¡Done!')
}
# Load data
run <- '_run1'
load('../_rData/_run1/threshold_prob.rData')
load('../_rData/_run1/clustereddata.rData')
gcm <- 'current'
pth.cls <- '../_rf/_output/_run1/_results/_process/_limitations/RF_3_Clust_lim_current.asc '
pth.unc <- '../_rf/_output/_run1/_results/_raw/RF_5Unc_current.asc'
pth.prb <- '../_rf/_output/_run1/_results/_raw/RF_5Prob_current.asc'
pth.out <- '../_rf/_output/_run1/_results/_raw'
no.absenceclasses <- 2
no.clusters <- 3
occ <- occ[,1:2]
mixedCategory(pth.cls, pth.unc, pth.prb, threshold, no.absenceclasses)
# Load libraries
require(pacman)
pacman::p_load(raster, rgdal, tidyverse, rgeos, gtools, stringr, doSNOW, foreach)
# Initial setup
g <- gc(reset = TRUE)
options(scipen = 999)
rm(list = ls())
# Functions to use
mixedCategory <- function(pathClust, pathUnc, pathProb, thr.prb, thr.unc){
lyrClust <- raster(pathClust)
lyrUnc   <- raster(pathUnc)
lyrProb  <- raster(pathProb)# To 2 criterios
result <- lyrClust
result[which(lyrUnc[] < thr.unc & lyrProb[] > thr.prb)] <- max(unique(lyrClust[]), na.rm = T) + 1
return(result)
}
# Load data
pth.cls <- '../_rf/_output/_run1/_results/_process/_limitations/RF_3_Clust_lim_current.asc'
pth.unc <- '../_rf/_output/_run1/_results/_raw/RF_5Unc_current.asc'
pth.prb <- '../_rf/_output/_run1/_results/_raw/RF_5Prob_current.asc'
load('../_rData/_run1/threshold_prob.rData')
load('../_rData/_run1/threshold_unc.rData')
thr.prb <- threshold
thr.unc <- thrUnc1
models <- list.files('../_rf/_output/_run1/_results/_process/_limitations/_2050') %>%
gsub('RF_3Clust_lim_', '', .) %>%
gsub('.asc', '', .)
models
no.clusters <- 3
years <- '_2050'
# Parallelizations
cl <- makeCluster(7)
registerDoSNOW(cl)
i = 1
path_clust <- paste('../_rf/_output/_run1/_results/_process/_limitations', years[j], sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Clust', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
j = 1
path_clust <- paste('../_rf/_output/_run1/_results/_process/_limitations', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Clust', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_Unc  <- paste('../_rf/_output/_run1/_results/_raw/_2050') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Unc', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_Unc
path_prob   <- paste('../_rf/_output/_run1/_results/_raw/_2050', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Prob', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_prob
mixta <- mixedCategory(pathClust = path_clust,
pathUnc = path_Unc,
pathProb = path_prob,
thr.unc = thr.unc,
thr.prb = thr.prb)
mixedCategory
path_clust
path_Unc
path_prob
path_clust <- paste('../_rf/_output/_run1/_results/_process/_limitations', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('lust', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_clust
paste('../_rf/_output/_run1/_results/_process/_limitations', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc')
path_clust <- paste('../_rf/_output/_run1/_results/_process/_limitations/_2050', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('lust', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_clust
path_prob <- paste('../_rf/_output/_run1/_results/_raw/_2050', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Prob', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_prob
mixta <- mixedCategory(pathClust = path_clust,
pathUnc = path_Unc,
pathProb = path_prob,
thr.unc = thr.unc,
thr.prb = thr.prb)
mixta
cl
foreach(i = 1:length(models), .packages = c('raster', 'dplyr', 'gtools', 'foreach', 'sp', 'stringr'), .verbose = TRUE) %dopar% {
print(models[i])
print(years[j])
path_clust <- paste('../_rf/_output/_run1/_results/_process/_limitations/_2050', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('lust', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_Unc  <- paste('../_rf/_output/_run1/_results/_raw/_2050') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Unc', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_prob <- paste('../_rf/_output/_run1/_results/_raw/_2050', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Prob', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
mixta <- mixedCategory(pathClust = path_clust,
pathUnc = path_Unc,
pathProb = path_prob,
thr.unc = thr.unc,
thr.prb = thr.prb)
writeRaster(mixta, paste0('../_RF/_run2/_results/_process/_mixed/', years[j], '/RF_', no.clusters, 'Classes_unc_', models[i], '.asc'), overwrite = T)
}
foreach(i = 1:length(models), .packages = c('raster', 'dplyr', 'gtools', 'foreach', 'sp', 'stringr'), .verbose = TRUE) %dopar% {
print(models[i])
print(years[j])
path_clust <- paste('../_rf/_output/_run1/_results/_process/_limitations/_2050', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('lust', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_Unc  <- paste('../_rf/_output/_run1/_results/_raw/_2050') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Unc', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_prob <- paste('../_rf/_output/_run1/_results/_raw/_2050', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Prob', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
mixta <- mixedCategory(pathClust = path_clust,
pathUnc = path_Unc,
pathProb = path_prob,
thr.unc = thr.unc,
thr.prb = thr.prb)
writeRaster(mixta, paste0('../_RF/_run2/_results/_process/_mixed/', years[j], '/RF_', no.clusters, 'Classes_unc_', models[i], '.asc'), overwrite = T)
}
no.clusters
foreach(i = 1:length(models), .packages = c('raster', 'dplyr', 'gtools', 'foreach', 'sp', 'stringr'), .verbose = TRUE) %dopar% {
print(models[i])
print(years[j])
path_clust <- paste('../_rf/_output/_run1/_results/_process/_limitations/_2050', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('lust', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_Unc  <- paste('../_rf/_output/_run1/_results/_raw/_2050') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Unc', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
path_prob <- paste('../_rf/_output/_run1/_results/_raw/_2050', sep = '/') %>%
list.files(., full.names = T, pattern = '.asc') %>%
grep('Prob', ., value = T) %>%
grep(models[i], ., value = T, fixed = T) %>%
.[1]
mixta <- mixedCategory(pathClust = path_clust,
pathUnc = path_Unc,
pathProb = path_prob,
thr.unc = thr.unc,
thr.prb = thr.prb)
writeRaster(mixta, paste0('../_rf/_output/_run1/_results/_process/_mixed/_2050/RF_', no.clusters, 'Classes_unc_', models[i], '.asc'), overwrite = T)
}
# Load libraries
library(pacman)
pacman::p_load(raster, rgdal, tidyverse)
# Initial setup
g <- gc(reset = TRUE)
rm(list = ls())
options(scipen = 999)
# Load data
run <- '_run1'
years <- '_2050'
lyrs <- paste0('../_rf/_output/_run1/_results/_process/_mixed/_2050/') %>%
list.files(full.names = TRUE, pattern = '.asc$') %>%
stack()
lyrs
yrs <- paste0('../_rf/_output/_run1/_results/_process/_mixed/_2050/') %>%
list.files(full.names = TRUE, pattern = '.asc$') %>%
stack()
yrs
lyr.mdl <- raster::modal(lyrs)
lyr.mdl
plot(lyr.mdl)
print(paste0('To write the raster ', i))
writeRaster(lyr.mdl, paste0('../_RF/_output/_run1/_results/_process/_mixed/RF_3classes_unc_future.asc'), overwrite = TRUE)
pacman::p_load(raster, rgdal, rgeos, stringr, velox, tidyverse, magrittr)
# Initial Setup
g <- gc(reset = TRUE)
rm(list = ls())
options(scipen = 999)
run <- '_run1'
# Load Data
crn <- raster(paste0('../_rf/_output/', run, '/_results/_process/RF_5Classes_unc_current.asc'))
f30 <- raster(paste0('../_rf/_output/', run, '/_results/_process/_mixed/RF_3classes_unc_future.asc'))
f50 <- raster(paste0('../_rf/_output/', run, '/_results/_process/imp_2050.asc'))
# Initial Setup
g <- gc(reset = TRUE)
rm(list = ls())
options(scipen = 999)
run <- '_run1'
# Load Data
crn <- raster(paste0('../_rf/_output/', run, '/_results/_process/RF_5Classes_unc_current.asc'))
f50 <- raster(paste0('../_rf/_output/', run, '/_results/_process/_mixed/RF_3classes_unc_future.asc'))
all_options <- read_csv('../_data/_tbl/classesImpGraLimMix.csv')
# Load Data
crn <- raster(paste0('../_rf/_output/', run, '/_results/_process/RF_5Classes_unc_current.asc'))
f50 <- raster(paste0('../_rf/_output/', run, '/_results/_process/_mixed/RF_3classes_unc_future.asc'))
all_options <- read_csv('../_data/_tbl/classesImpGraLimMix.csv')
unique(all_options$category)
# Load libraries
require(pacman)
pacman::p_load(raster, rgdal, rgeos, stringr, velox, tidyverse, magrittr)
# Initial Setup
g <- gc(reset = TRUE)
rm(list = ls())
options(scipen = 999)
run <- '_run1'
# Load Data
crn <- raster(paste0('../_rf/_output/', run, '/_results/_process/RF_5Classes_unc_current.asc'))
f50 <- raster(paste0('../_rf/_output/', run, '/_results/_process/_mixed/RF_3classes_unc_future.asc'))
all_options <- read_csv('../_data/_tbl/classesImpGraLimMix.csv')
unique(all_options$category)
labelss <- data.frame(value = c(0, 1, 2, 3, 4, 5), category = c('Unsuit', 'cope', 'adjust', 'transform', 'opportunity', 'resilience'))
# Function to use
impGra <- function(crn, ftr){
# crn <- crn
ftr <- f50
msk <- crn * 0
crd_df <- coordinates(crn)
x <- raster::extract(crn, crd_df, cellnumbers = TRUE) %>% as_data_frame()
ncell <- dplyr::select(x, cells)
x <- select_(x, names(crn))
colnames(x) <- 'current'
y <- raster::extract(ftr, crd_df[,c('x', 'y')], cellnumbers = TRUE) %>% as_data_frame()
y <- select_(y, names(ftr))
colnames(y) <- 'future'
z <- data.frame(x, y, ncell) %>% as_tibble()
print('To Results')
rslts <- left_join(z, all_options, by = c('current', 'future'))
labls <- as_tibble(labelss) %>% mutate(category = as.character(category))
final <- full_join(rslts, labls, by = 'category') %>%
dplyr::select(value) %>%
pull(1)
final <- left_join(rslts, labls, by = 'category') %>%
dplyr::select(value) %>%
pull(1)
length(final)
length(msk)
hist(final)
rst <- raster::setValues(msk, final)
return(rst)
}
crn <- crn
ftr <- f50
msk <- crn * 0
crd_df <- coordinates(crn)
x <- raster::extract(crn, crd_df, cellnumbers = TRUE) %>% as_data_frame()
ncell <- dplyr::select(x, cells)
x <- select_(x, names(crn))
colnames(x) <- 'current'
y <- raster::extract(ftr, crd_df[,c('x', 'y')], cellnumbers = TRUE) %>% as_data_frame()
y <- select_(y, names(ftr))
colnames(y) <- 'future'
z <- data.frame(x, y, ncell) %>% as_tibble()
print('To Results')
rslts <- left_join(z, all_options, by = c('current', 'future'))
labls <- as_tibble(labelss) %>% mutate(category = as.character(category))
z
all_options
all_options <- read_csv2('../_data/_tbl/classesImpGraLimMix.csv')
all_options
crn <- crn
ftr <- f50
msk <- crn * 0
crd_df <- coordinates(crn)
x <- raster::extract(crn, crd_df, cellnumbers = TRUE) %>% as_data_frame()
ncell <- dplyr::select(x, cells)
x <- select_(x, names(crn))
colnames(x) <- 'current'
y <- raster::extract(ftr, crd_df[,c('x', 'y')], cellnumbers = TRUE) %>% as_data_frame()
y <- select_(y, names(ftr))
colnames(y) <- 'future'
z <- data.frame(x, y, ncell) %>% as_tibble()
print('To Results')
rslts <- left_join(z, all_options, by = c('current', 'future'))
labls <- as_tibble(labelss) %>% mutate(category = as.character(category))
final <- full_join(rslts, labls, by = 'category') %>%
dplyr::select(value) %>%
pull(1)
length(final)
length(msk)
final <- left_join(rslts, labls, by = 'category') %>%
dplyr::select(value) %>%
pull(1)
rst <- raster::setValues(msk, final)
plot(rst)
writeRaster(rst, '../_rf/_output/_run1/_results/_process/change_2050.tif', overwrite = TRUE)
